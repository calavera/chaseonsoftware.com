#+TITLE: Software Is a Factory Floor Product
#+DRAFT: true

Jason Fried published an article on reducing dependencies in an organization (if you haven't read [[https://m.signalvnoise.com/depend-less-on-each-other-507fe0e23e4b#.yjo3944m7][Depend less on each other: Don’t grind together, glide past one another.]], go do that first) and I wanted to write a counter-argument that states that the following is a fallacy:

#+BEGIN_QUOTE
 If you’re building airplanes or working an assembly line, fine. That’s probably required. But most companies these days aren’t, yet they still work like they are. One piece at a time, vs. many pieces at once, in parallel.
#+END_QUOTE

He used the argument that "...If your company makes an iOS app and an Android app, and the iOS team can’t release a new feature until the Android team has finished their version, that’s crazy." and I totally agree with him on that point, but the argument itself is flawed.

In software, particularly when it comes to the internet, every application that has data that changes relies, at worst, on a database connection and ideally on a =RESTful JSON API= or some form of data abstraction so an engineer can't write a SQL query in an iOS app that directly impacts all the other applications that consume that data. 

With that in mind, you'll realize that *the dependency of an Android or iOS app is not another app, but the layer that provides the data.* That dependency is /unavoidable/ and choosing to believe that the software lifecycle isn't a factory floor doesn't mean that it isn't. In this case, in order for either an iOS or Android (or web) app to go into production, it /has/ to be done after the data layer is in production. This is an unavoidable dependency.

To solve this problem, however, the API team can provide a contract of what the consuming teams should expect the data to look like and the consuming teams can mock their data during development (which will give you extra points because mocking the data makes it easier to test your application in isolation without being impacted by flaky services in dev or QA). This doesn't eliminate the dependency but it reduces the friction of the dependency and increases the speed of development (by making asynchronous work possible).

All dependencies can work this way. Technical contracts through communication can be the single most important action an organization can take to increase throughput with the dependencies that are unavoidable.

Now that the unavoidable dependencies are out of the way, I want to tackle the more subtle (and more dangerous, in my opinion) example of reducing dependencies that he mentioned that actually turn out to be creating /greater dependencies/:

#+BEGIN_QUOTE
...So iOS and Android can expose those mobile web screens in their native apps, and level them up later to fully native versions on their own schedule if they choose.
#+END_QUOTE

Integrating mobile web /in a native application/ is one of the best examples of dependencies that exists. Let's consider this example:

The Android team of an eCommerce company uses the mobile web team's code through a webview in their application for a product page so they can focus on other more critical things like securing the checkout of the application. The Android team is well on their way to completing their security updates for checkout and haven't done a release recently. Suddenly, customers start to tweet about how they can't add to cart through the Android app because there was a mobile web deploy that broke add to cart. 

This presents a few problems:

1. The Android team has now been interrupted from their current work to address an issue...
2. that they have no control over because they have this dependency on the mobile web team...
3. and because they are likely not communicating with this mobile web team frequently, they were unaware that there was going to be a release that had the possibility of creating a critical revenue loss for the company.

I'm not suggesting mobile web integration with Android or iOS applications is a bad idea, but based on this example one can see that the example Jason Fried gave on "reducing dependencies" is in fact the opposite of that. What's worse, believing that the above is reducing dependencies will likely lead to reduced communication which will create a culture of "firefighting".


